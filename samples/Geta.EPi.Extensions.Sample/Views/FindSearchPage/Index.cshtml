@using System.Web.Mvc.Html
@using EPiServer.Editor
@using EPiServer.Find
@using EPiServer.Find.Helpers.Text
@using EPiServer.Shell.Web.Mvc.Html
@using Geta.EPi.Extensions.Sample.Models.ViewModels
@model FindSearchContentModel

@{
    Layout = "~/Views/Shared/Layouts/_TwoPlusOne.cshtml";
}

@*Only load external scripts and css if EPiServer Find is configured and functional*@
@if (Model.IsConfigured)
{
    <script language="javascript">
        function spellcheck(query, hitsCutoff) {
            $.ajax({
                url: "@Model.PublicProxyPath" + "/_spellcheck?query=" + encodeURIComponent(query) + "&size=1&hits_cutoff=" + hitsCutoff + "&tags=" + encodeURIComponent("@Model.Tags"),
                success: function (data) {
                    if (data.hits && data.hits.length && data.hits[0].suggestion) {
                        var suggestion = data.hits[0].suggestion;
                        $("#suggestion").html("@Html.Translate("/searchpagetemplate/suggestion")" + ": " +  "<a href='?q=" + suggestion + "'>" + suggestion + "</a>");
                    }
                }
            });
        }
        function relatedQuery(query, hitsCutoff) {
            $.ajax({
                url: "@Model.PublicProxyPath" + "/_didyoumean?query=" + encodeURIComponent(query) + "&size=3&hits_cutoff=" + hitsCutoff + "&tags=" + encodeURIComponent("@Model.Tags"),
                success: function (data) {
                    if (data.hits && data.hits.length) {
                        var list = $.map(data.hits, function (hit) { return hit.suggestion; });
                        $("#suggestion").html("@Html.Translate("/searchpagetemplate/peoplealsosearchedfor")" + ": " + list.join(", "));
                    }
                }
            });
        }

        $(function () {
            $("#srchTxt").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Model.PublicProxyPath" + "/_autocomplete?prefix=" + encodeURIComponent(request.term) + "&size=5" + "&tags="+encodeURIComponent("@Model.Tags"),
                        success: function (data) {
                            response($.map(data.hits, function (item) {
                                return {
                                    label: item.query,
                                    value: item.query
                                };
                            }));
                        }
                    });
                },
                minLength: 2
            });
        });
    </script>
}

<div class="row">
    <div class="span8,search-form">        
        @using (Html.BeginForm(null, null, Model.Layout.SearchActionUrl, PageEditing.PageIsInEditMode ? FormMethod.Post : FormMethod.Get))
        {
            <div>
                Analyzer: @Html.DropDownList("selectedAnalyzer", Model.Analyzers)
            </div>
            <div>
                <input id="srchTxt" type="text" tabindex="1" name="q" value="@Model.Query"/>
                <input disabled="@(!Model.IsConfigured)" type="submit" tabindex="2" class="btn" value="@Html.Translate("/searchpagetemplate/searchbutton")"/>
            </div>
        }
    </div>
</div>

@if(Model.Hits != null)
{
    <div class="row">
        <div class="span8 grayHead">
            <h2>@Html.Translate("/searchpagetemplate/result")</h2>
            <p>
                @Html.Translate("/searchpagetemplate/searchfor") <i>@Model.Query</i>
                @Html.Translate("/searchpagetemplate/resultedin")
                @if(Model.Query.IsNotNullOrEmpty() && Model.NumberOfHits > 0)
                {
                    @Model.NumberOfHits
                    @Html.Raw(" ")
                    @Html.Translate("/searchpagetemplate/hits")

                    <script type="text/javascript">relatedQuery($("#srchTxt").val(), @Model.NumberOfHits)</script>
                }
                @if (Model.NumberOfHits <= 0)
                {
                    @Html.Translate("/searchpagetemplate/zero")
                    @Html.Raw(" ")
                    @Html.Translate("/searchpagetemplate/hits")

                    <script type="text/javascript">spellcheck($("#srchTxt").val(), @Model.NumberOfHits)</script>
                }
                <div id="suggestion" style="margin: 1%;"></div>
            </p>
        </div>
    
        @*Display search results here*@
        <div class="span6 SearchResults">
            @foreach (var hit in Model.Hits.Hits)
            {
                <div class="listResult">
                    <h3><a href="@hit.Document.Url">@Html.Raw(@hit.Document.Title)</a></h3>
                    <p>
                        @if (hit.Document.ImageUri != null)
                        {
                            <img src="@hit.Document.ImageUri.ToString()" height="@Model.HitImagesHeight"/>
                        }
                        @Html.Raw(@hit.Document.Excerpt)
                    </p>
                    <hr />
                </div>
            }
        </div>
        
        @if (Model.Hits.TotalMatching > 0)
        {
            @*Sidebar in which facets/filter are shown*@
            <div class="span2">
                <div class="well">
                    <h2>Sections</h2>
                    <ul class="nav nav-list">

                        @*Link for clearing section filter*@
                        <li @Html.Raw(string.IsNullOrWhiteSpace(@Model.SectionFilter) ? "class=\"active\" " : "")>
                            <a href="@Model.GetSectionGroupUrl("")"> All (@Model.Hits.FilterFacet("AllSections").Count)</a>
                        </li>
                        
                        @*Display number of hits per section with link for filtering by section*@
                        @foreach (var sectionGroup in Model.Hits.TermsFacetFor(x => x.SearchSection))
                        {
                            <li @Html.Raw(@Model.SectionFilter == @sectionGroup.Term ? "class=\"active\" " : "")>
                                <a href="@Model.GetSectionGroupUrl(sectionGroup.Term)">@sectionGroup.Term (@sectionGroup.Count)</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
            @*Display paging controls*@
            <div class="span8 pagination pagination-centered" >
                <ul>
                    @*Link to the previous paging page*@
                    @if (Model.PagingPage == 1)
                    {
                        <li class="disabled">
                            <a>&laquo; </a>
                        </li>
                    }
                    else
                    {
                        <li>
                            <a href="@Model.GetPagingUrl(@Model.PagingPage - 1)">&laquo; </a>
                        </li>
                    }
                    
                    @*Link to the previous paging section*@
                    @if (Model.PagingSection > 1)
                    {
                        <li>
                            <a href="@Model.GetPreviousPagingSectionUrl()">...</a>
                        </li>
                    }

                    @*Display links for each specific paging page*@
                    @for (int pageNumber = @Model.PagingSectionFirstPage; pageNumber <= @Model.PagingSectionLastPage; pageNumber++)
                    {
                        if (Model.PagingPage == pageNumber)
                        {
                            <li class="active">
                                <a> @pageNumber </a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a href="@Model.GetPagingUrl(@pageNumber)"> @pageNumber </a>
                            </li>
                        }
                    }
                    
                    @*Link to the next paging section*@
                    @if (Model.PagingSection < Model.TotalPagingSections)
                    {
                        <li>
                            <a href="@Model.GetNextPagingSectionUrl()">...</a>
                        </li>
                    }

                    @*Link to the next paging page*@
                    @if (Model.PagingPage == Model.TotalPagingPages)
                    {
                        <li class="disabled">
                            <a>&raquo;</a>
                        </li>
                    }
                    else
                    {
                        <li>
                            <a href="@Model.GetPagingUrl(@Model.PagingPage+1)">&raquo;</a>
                        </li>
                    }
                </ul>
            </div>
    </div>
}

@if (!Model.IsConfigured)
{
    @Html.Partial("FindTemplateHint", Html.Raw(Html.Translate("/searchpagetemplate/notconfigured")) as HtmlString)
}
